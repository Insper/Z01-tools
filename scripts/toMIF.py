#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Rafael Corsi @ insper.edu.br
# Dez/2017
# Disciplina Elementos de Sistemas
#
# Convert program memmory to altera mif file
# that can be used to load FPGA and to Simulate (modelsim)
# http://quartushelp.altera.com/13.0/mergedProjects/reference/glossary/def_mif.htm
#
# LOG:
# - 11/4/2018
#    O tamanho do mif (DEPTH) estava fixo em 30
#    alterei para ser atribuido com o real tamanho
#    da memória a ser atualizada, isso e importante
#    pois usamos esse arquivo para atuailizar a ROM da FPGA

import os
import argparse

TAB = "    "
END = "\n"


def toMIF(mem, mif):
    cnt = 0
    try:
        fw = open(mif,"w")
        fr = open(mem,"r")

        # verifica quantas instrucoes possui
        # 11/4/18
        num_lines = sum(1 for line in open(mem))

        fw.write("-- Elementos de Sistema - INSPER.edu.br"+END)
        fw.write("-- Rafael Corsi"+END)
        fw.write("-- File generated by toMIF.py"+END)
        fw.write("-- originated from"+mem+""+END)
        fw.write("-- to be used on ALTERA FPGAs"+END+END)

        fw.write("WIDTH=16;"+END)
        fw.write("DEPTH={};".format(num_lines)+END)
        fw.write(""+END)
        fw.write("ADDRESS_RADIX=UNS;"+END)
        fw.write("DATA_RADIX=BIN;"+END)
        fw.write(""+END)
        fw.write("CONTENT BEGIN"+END)

        for line in fr:
            fw.write( TAB
                      + '{:4d}'.format(cnt)
                      +" : "
                      +line.rstrip()
                      +";"
                      +""+END)
            cnt = cnt + 1
        # colocar for aqui
        fw.write("END;"+END)

        fw.close()
        fr.close()

    except IOError:
        print("Arquivo não encontrado")

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("-i", "--in_mem_mif" , required=True, help="arquivo de entrada memoria")
    ap.add_argument("-o", "--out_mif" , required=True, help="arquivo de saida mif para Altera")
    args = vars(ap.parse_args())
    root = os.getcwd()
    toMIF(mem=args["in_mem_mif"], mif=args["out_mif"])
